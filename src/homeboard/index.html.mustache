<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Dashboard</title>
<style>
:root {
  --page-padding: 20px;
}
p {
  margin: 0;
}
body {
    font-family: sans-serif;
    font-size: 5rem;
}
#clock {
    font-family: monospace;
    font-size: 10rem;
}
#kpi_meters {
  position: absolute;
  top: var(--page-padding);
  left: var(--page-padding);
}
#day_info {
  position: absolute;
  top: var(--page-padding);
  right: var(--page-padding);
  text-align: right;
}
#dashboard_controller {
  position: absolute;
  bottom: var(--page-padding);
  right: var(--page-padding);
}


</style>
</head>
<body>

<div id="widgets">
  {{#widgets}}
  <article>
    {{{article}}}
  </article>
  {{/widgets}}
</div>

<div id="dashboard_controller">
  <button onclick="toggleFullscreen()">Fullscreen</button>
  <button data-status="off">Turn Wake Lock ON</button>
</div>

<script>
function toggleFullscreen() {
    if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen();
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
    }
}

// toggle button
const wakeButton = document.querySelector('[data-status]');
// checkbox
const reaquireCheck = document.querySelector('#reaquire');

// change button and status if wakelock becomes aquired or is released
const changeUI = (status = 'acquired') => {
  const acquired = status === 'acquired' ? true : false;
  wakeButton.dataset.status = acquired ? 'on' : 'off';
  wakeButton.textContent = `Turn Wake Lock ${acquired ? 'OFF' : 'ON'}`;
}

if ('wakeLock' in navigator) {
  let wakeLock = null;

  const requestWakeLock = async () => {
    try {
      wakeLock = await navigator.wakeLock.request('screen');
      changeUI();

      // listen for our release event
      wakeLock.onrelease = function(ev) {
        console.log(ev);
      }
      wakeLock.addEventListener('release', () => {
        // if wake lock is released alter the button accordingly
        changeUI('released');
      });

    } catch (err) {
      // if wake lock request fails - usually system related, such as battery
      wakeButton.dataset.status = 'off';
      wakeButton.textContent = 'Turn Wake Lock ON';
      statusElem.textContent = `${err.name}, ${err.message}`;

    }
  }
  requestWakeLock();

  // if we click our button
  wakeButton.addEventListener('click', () => {
    // if wakelock is off request it
    if (wakeButton.dataset.status === 'off') {
      requestWakeLock()
    } else { // if it's on release it
      wakeLock.release()
        .then(() => {
          wakeLock = null;
        })
    }
  })

  const handleVisibilityChange = () => {
    if (wakeLock !== null && document.visibilityState === 'visible') {
      requestWakeLock();
    }
  }

  document.addEventListener('visibilitychange', handleVisibilityChange);
} else {
  wakeButton.disabled = true;
}

</script>


</body>
</html>